---
- name: Deploy Kubernetes
  hosts: master, worker
  become: true
  tags:
    - install_kubernetes
  vars:
    kubernetes_version: 1.32
    ansible_user: mchellmer
  tasks:
    - name: Download and dearmor Kubernetes GPG key
      ansible.builtin.shell:
        cmd: >
          curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{kubernetes_version}}/deb/Release.key | 
          gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes APT repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/ /"
        filename: kubernetes
        state: present
    
    - name: Update and upgrade all packages
      ansible.builtin.apt:
        upgrade: yes
        update_cache: yes

    - name: Install Kubernetes packages
      ansible.builtin.apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
          - kubernetes-cni
        state: present

- name: Configure Kubernetes Master
  hosts: master
  vars:
    ansible_user: mchellmer
  tasks:
    - name: Check if kubeadm init was run
      shell: |
        if [ -f /etc/kubernetes/admin.conf ]; then
          echo "kubeadm init was run"
        else
          echo "kubeadm init was not run"
        fi
      register: kubeadm_init_check
      changed_when: false
      tags: reset_kubeadm
      
    - name: Reset Kubernetes Master
      shell: kubeadm reset -f
      become: true
      when: "'kubeadm init was run' in kubeadm_init_check.stdout"
      tags: reset_kubeadm
      
    - name: Initialize Kubernetes Master
      shell: | 
          kubeadm init \
          --pod-network-cidr {{kubernetes_pod_network_cidr}} \
          --apiserver-advertise-address {{ (hosts_1972 | selectattr('name', 'equalto', '1972-master-1') | first).ip.eth0 }} \
          --apiserver-cert-extra-sans kubernetes.cluster.home
      become: true
      register: kubeadm_init_output
      changed_when: "'kubeadm join' in kubeadm_init_output.stdout"
      tags: init_kubeadm
    
    - name: Save join command
      ansible.builtin.copy:
        dest: /root/kubeadm_join_command.sh
        content: "#!/bin/bash\n{{ kubeadm_init_output.stdout_lines[-2:] | join('\n') }}"
        mode: '0700'
      become: true
    
    - name: Fetch join command
      ansible.builtin.fetch:
        src: /root/kubeadm_join_command.sh
        dest: /tmp/kubeadm_join_command.sh
        flat: yes
      become: true

    - name: Create .kube directory
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/.kube"
        state: directory

    - name: Copy admin.conf to user's kube config
      ansible.builtin.copy:
        src: /etc/kubernetes/admin.conf
        dest: "/home/{{ ansible_user }}/.kube/config"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'
        remote_src: yes
      become: true

    - name: Set KUBECONFIG environment variable
      lineinfile:
        path: "/home/{{ ansible_user }}/.bashrc"
        line: 'export KUBECONFIG=/home/{{ ansible_user }}/.kube/config'
        create: yes
      become: true
      when: ansible_user is defined

    - name: Source .bashrc to apply KUBECONFIG
      shell: source /home/{{ ansible_user }}/.bashrc
      args:
        executable: /bin/bash
      become: true
      when: ansible_user is defined

- name: Join Kubernetes master to worker nodes
  hosts: worker
  become: true
  vars:
    ansible_user: mchellmer
  tasks:
    - name: Reset node
      shell: kubeadm reset -f

    - name: Copy join command to nodes
      ansible.builtin.copy:
        src: /tmp/kubeadm_join_command.sh
        dest: /home/mchellmer/kubeadm_join_command.sh
        mode: '0700'
        owner: mchellmer

    - name: Join nodes to Kubernetes cluster
      ansible.builtin.shell: /home/mchellmer/kubeadm_join_command.sh
      